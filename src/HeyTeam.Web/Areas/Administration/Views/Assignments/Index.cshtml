@model HeyTeam.Web.Models.Assignments.IndexViewModel
@{
    ViewData["Title"] = "Index";
}

<h2>Assignments</h2>
<h3>List</h3>
<div>
    <div class="btn-group" role="group" aria-label="...">
        <a class="btn btn-primary" asp-controller="Assignments" asp-area="Administration" asp-action="New">Add New Assignment</a>
    </div>
</div>
<div class="row">
    <div class="col-md-12" style="margin-bottom:15px;">
        <div class="form-inline">
            <div class="form-group">
                <label for="month">Month:</label>
                <input id="month" type="month" class="form-control" value=@($"{DateTime.Now.Year}-{(DateTime.Now.Month < 10 ? "0" : "")}{DateTime.Now.Month}")>
            </div>
            <div class="form-group">
                <label for="squads" class="control-label">Squads:</label>
                <select id="squads" name="squads" asp-items="Model.Squads" class="form-control"></select>
            </div>
        </div>
    </div>
</div>

<div id="message" style="display:none"></div>
<div class="assignments"></div>

<div class="modal fade" id="editAssignmentDialog" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" id="editAssignmentForm">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Edit Assignment</h4>
                </div>
                <div class="modal-body">                    
                    <div class="form-group">
                        <label for="assignmentTitle" class="control-label">Title</label>
                        <input type="text" id="assignmentTitle" class="form-control" required maxlength="250" />
                    </div>
                    <div class="form-group">
                        <label for="assignmentInstructions" class="control-label">Instructions</label>
                        <textarea id="assignmentInstructions" class="form-control" required rows="5"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="assignmentDueDate" class="control-label">Due Date</label>
                        <input type="date" id="assignmentDueDate" class="form-control" style="width:200px" value="null" required min="@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")" />
                    </div>
                    <div class="form-group">
                        <label for="assignmentTrainingMaterials" class="control-label" style="display:block;">Training Materials</label>
                        <select id="assignmentTrainingMaterials" class="form-control" multiple style="width:100%"></select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    <input type="submit" class="btn btn-primary" value="Save" />
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/select2/dist/js/select2.min.js"></script>
    <script>
        var trainingMaterialsDropdown = null;
        var tablehtml =
            '<div class="table-responsive">' +
            '<table class="table table-bordered table-hover">' +
            '<thead>' +
            '<tr>' +
            '<th class="col-md-2">Title</th>' +
            '<th class="col-md-3">Instructions</th>' +
            '<th class="col-md-2">Squads</th>' +
            '<th class="col-md-2 text-center">Due Date</th>' +
            '<th class="col-md-1  text-center">Players</th>' +
            '<th class="col-md-1  text-center">Training Materials</th>' +
            '<th class="col-md-1 text-center">Actions</th>' +
            '</tr>' +
            '</thead>' +
            '<tbody></tbody>' +
            '</table>' +
            '</div>';

        $("#squads").select2();
        $("#squads").change(updateTable);
        $("#month").change(updateTable);

        function updateTable() {
            var date = $('#month').val().split('-');
            $(".assignments").empty();
            $("#message").text("Fetching data, please wait...");
            $("#message").show();

            var date = $('#month').val().split('-');
            var apiUrl = "/api/assignments?month=" + date[1] + "&year=" + date[0];
            if ($('#squads').val().length > 0) {
                apiUrl = apiUrl + "&squads=" + $('#squads').val();
            }

            console.log("calling ajax...");
            $.ajax({
                method: "GET",
                url: apiUrl
            }).done(function (data) {
                console.log("ajax done...");
                if (data.length > 0) {
                    addRows(data);
                    $(".assignments").show();
                    $("#message").hide();
                } else {
                    $(".assignments").hide();
                    $("#message").show();
                    $("#message").text("No records found");
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.log("ajax failed...");
            }).always(function () {
                console.log("ajax completed...");
                bindEvents();
            });
        }

        function bindEvents() {
            $('.table-responsive').unbind();
            $("button.assignAgain").unbind();

            $('.table-responsive').on('show.bs.dropdown', function () {
                $('.table-responsive').css("overflow", "inherit");
            });

            $('.table-responsive').on('hide.bs.dropdown', function () {
                $('.table-responsive').css("overflow", "auto");
            })


            $("button.editAssignment").click(function () {
                var row = $(this).closest("tr");                
                var assignmentId = row.data("assignmentid");
                getAssignment(assignmentId, showEditAssignmentDialog);
            });

            $("button.assignNewPlayer").click(function () {
                var assignmentId = $(this).closest("th").data("assignmentid");
                console.log("assigning to new player..." + assignmentId);
            });

            $(".assignmentTitle").tooltip("destroy");
            $(".assignmentTitle").tooltip({ placement: "auto right", trigger: 'hover' });
        }

        function showEditAssignmentDialog(assignment) {
            //console.log(data);
            $('#editAssignmentForm').unbind();
            $('#editAssignmentForm').submit(function (e) {

            });

            $("#assignmentTitle").val(assignment.title);
            $("#assignmentInstructions").val(assignment.instructions);
            $("#assignmentDueDate").val(formatDate(assignment.dueDate, 'yyyyMMdd'));
            var trainingMaterials = formatTrainingMaterials(assignment.trainingMaterials);
            setUpTrainingMaterials(trainingMaterials);
            $('#editAssignmentDialog').modal('show');
        }

        function formatTrainingMaterials(trainingMaterials) {
            var formattedTrainingMaterials = new Array();
            if (trainingMaterials != null && trainingMaterials.length > 0) {
                for (var index in trainingMaterials) {
                    var tm = trainingMaterials[index];
                    formattedTrainingMaterials.push(
                        { id: tm.guid, text: tm.title, description: tm.description, thumbnail: tm.thumbnailUrl, title: tm.title, guid: tm.guid, url: tm.url, contentType: tm.contentType }
                    );
                }
            }
            return formattedTrainingMaterials;
        }


        function addRows(data) {
            var table = $(tablehtml);
            var tableBody = table.find("tbody");
            for (var index in data) {
                var record = data[index];
                var row = "<tr data-assignmentid='" + record.assignmentId + "'>" +
                    "<td>" + record.title + "</td>" +
                    "<td><a class='assignmentTitle' title='" + record.instructions + "'>" + (record.instructions != null && record.instructions.length > 100 ? (record.instructions.substring(0, 99) + "...") : record.instructions) + "</a></td>" +
                    "<td>" + record.squads + "</td>" +
                    "<td class='text-center'>" + record.dueDate + "</td>" +
                    "<td class='text-center'>" + record.playerCount + "</td>" +
                    "<td class='text-center'>" + record.trainingMaterialCount + "</td>" +
                    "<td class='text-center'><div class='dropdown'>" +
                    "<button class='btn btn-default dropdown-toggle btn-sm' type='button' id='dropdownMenu1' data-toggle='dropdown' aria- haspopup='true' aria-expanded='true' >" +
                    "<span class='caret'></span>" +
                    "</button>" +
                    "<ul class='dropdown-menu dropdown-menu-right' aria-labelledby='dropdownMenu1'>" +
                    "<li><button class='btn btn-link editAssignment'>Edit Assignment</li>" +
                    "<li><button class='btn btn-link addRemovePlayers'>Add/Remove Players</li>" +
                    "<li><button class='btn btn-link addRemovePlayers'>Delete Assignment</li>" +
                    "</ul>" +
                    "</td>" +
                    "</tr>";
                tableBody.append(row);
            }
            $(".assignments").append(table);
        }

        function removePlayerAssignment(row, assignmentId, playerId) {
            $.ajax({
                method: "POST",
                url: "/api/assignments/remove-player",
                data: { "playerId": playerId, "assignmentId": assignmentId }
            }).done(function (data) {
                $(row).remove();
            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.log("ajax failed...");
            }).always(function () {

            });
        }

        function getAssignment(assignmentId, callback) {
            $.ajax({
                method: "GET",
                url: "/api/assignments/" + assignmentId
            }).done(function (data) {                
                callback(data);
            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.log("ajax failed...");
            });
        }


        function editAssignment(assignmentId, newDate, dueDateColumn) {
            $.ajax({
                method: "PUT",
                url: "/api/assignments/" + assignmentId,
                data: { "dueDate": newDate }
            }).done(function (data) {
                dueDateColumn.text(formatDate(newDate, 'ddMMMyyyy'));
            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.log("ajax failed...");
            }).always(function () {
                $('#dueDateForm').unbind();
                $('#editAssignmentDialog').modal('hide');
            });
        }

        function setUpTrainingMaterials(trainingMaterials) {
            if (trainingMaterialsDropdown != null) {
                $('#assignmentTrainingMaterials').empty();
                $('#assignmentTrainingMaterials').select2("destroy");
            }           

            trainingMaterialsDropdown = $('#assignmentTrainingMaterials').select2({
                ajax: {
                    url: '/api/library?',
                    data: function (params) {
                        var query = {
                            q: params.term,
                            page: 1
                        };
                        return query;
                    },
                    processResults: function (data) { return { results: data }; }
                },
                minimumInputLength: 1,
                data: trainingMaterials,
                placeholder: 'select training materials...',
                templateResult: resultStyles,
                templateSelection: resultStyles
            });
            
            for (var i in trainingMaterials) {
                $("#assignmentTrainingMaterials option[value='" + trainingMaterials[i].id + "']").prop("selected", true);
            }
            trainingMaterialsDropdown.trigger("change");
            
        }

        function resultStyles(selection) {
            if (!selection.id) { return selection.text; }
            var thumbnail = selection.thumbnail;
            if (!thumbnail) {
                return selection.text;
            } else {
                var $selection = $(
                    '<div class="media" style="margin-top:0; padding-bottom:5px">' +
                    '<div class="media-left"><img class="media-object" style="max-height:40px;" src="' + thumbnail + '" alt=""></div>' +
                    '<div class="media-body"><div class="img-changer-text">' + selection.text + '</div>(' + selection.contentType + ')</div >' +
                    '</div>'
                );
                return $selection;
            }
        }

        updateTable();
    </script>
}

@section CSS {
    <link href="~/lib/select2/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        .select2-container--default .select2-search--inline .select2-search__field {
            width: 100% !important;
        }
    </style>
}