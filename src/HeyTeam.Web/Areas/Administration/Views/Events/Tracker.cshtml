@model HeyTeam.Web.Models.EventAttendanceModel
<h1>@($"{Model.Title}")</h1>
<h3>Tracker</h3>
<span class="text-info">@($"{Model.EventType} {Model.StartDate.ToString("ddd dd-MMM-yyyy h:mm t")}M")<br />@($"{Model.Location}")</span>

<div class="row">
    <div class="container">
        <div class="col-md-6 text-right clock" data-bind="text:currentStageDescription"></div>
        <div class="col-md-6 text-left clock" data-bind="text:clock.timeElapsed"></div>
    </div>
</div>
<div class="row">
    <div class="container">
        <button type="button" class="btn btn-success" data-bind="click:moveStage, text:nextStageName, disable:(isGameOver())"></button>
    </div>
</div>
<div class="row">
    <div class="col-md-3 text-right score-board">Mapola FC</div>
    <div class="col-md-2 text-center score-board form-inline">
        <input class="form-control" type="number" value="0" style="width:60px;" min="0"/> - 
        <input class="form-control" type="number" value="0" style="width:60px;" min="0"/>
    </div>
    <div class="col-md-3 text-left score-board">Opponent</div>
    <div class="col-md-4">
        <button type="button" class="btn btn-primary" data-bind="click:executeSubstitutions, disable:(isGameOver())">Swap Players</button>
        <button class="btn btn-primary" id="checkAttendance">Check Attendance</button>
    </div>
</div>
<div class="row">
    <div class="col-md-8">
        <div class="col-md-12" style="border:solid 3px rgb(200,200,200); background-image:url('/images/soccer-field.jpg'); background-repeat:no-repeat; background-size:100% auto;height:500px;">
            <div class="col-md-offset-2" style="padding-top:75px; color:rgb(255,255,255);font-size:1.3em;">
                <ul style="list-style-type: none" data-bind="foreach: lineup().sort(sortingComparer)">
                    <li style="margin-top:4px;margin-bottom:4px;">
                        <button class="btn" type="button" style="width:150px;"
                                data-bind="text: name, click: $root.selectPlayer, css: { 'btn-default': (isSelected() == false), 'btn-warning': (isSelected() == true)  }"></button>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th class="col-md-8">Player</th>
                    @*<th class="col-md-2 text-center">On</th>
                        <th class="col-md-2 text-center">Off</th>*@
                    <th class="col-md-4 text-center">Time On</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: players">
                <tr data-bind="css: { 'broughtOn' : (isPlaying() == true)}">
                    <td data-bind="text:name"></td>
                    @*<td class="text-center" data-bind="text:ins"></td>
                        <td class="text-center" data-bind="text:outs"></td>*@
                    <td class="text-center" data-bind="text:getTotalGameTime"></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="panel panel-default">
            <div class="panel-body">
                <ul style="list-style-type: none" data-bind="foreach: substitutes().sort(sortingComparer)" class="list-inline">
                    <li style="margin-top:4px;margin-bottom:4px;">
                        <button class="btn" type="button" style="width:150px;"
                                data-bind="text: name, click: $root.selectPlayer, css: { 'btn-default': (isSelected() == false), 'btn-warning': (isSelected() == true)  }, disable:(attendance() == 0)"></button>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div id='attendanceDialog' class='modal fade'>
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Attendance</h4>
            </div>
            <div id='attendanceContainer' class="modal-body">

            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/knockout/dist/knockout.js"></script>
    <script type="text/javascript">

        var status = {
            injured: "injured", sentOff: "sentOff", playing: "playing", onTheBench: "onTheBench"
        };

        var gameStages = {
            beforeKickOff: 0, firstHalfStarted: 1, halfTime: 2, secondHalfStarted: 3, gameOver: 4
        };

        var gameStageCommands = [
            "Before Kick Off", "Start Game", "Half Time", "Start Second Half", "End Game", "Game is Over"
        ];

        var gameStageDescription = [
            "Build Up", "First Half", "Half Time", "Second Half", "Full Time"
        ];

        var attendance = {
            present: 1, noshow: 2, late: 3, leftEarly: 4
        };

        function clock() {
            var self = this;
            self.totalSeconds = ko.observable(0);
            self.timeElapsed = ko.pureComputed(function () {
                var seconds = self.totalSeconds();
                var hours = Math.floor(seconds / 3600);
                var minutes = Math.floor(seconds / 60 % 60);
                var seconds = parseInt(seconds % 60);
                var elapsed = (hours < 10 ? "0" : "") + hours + ":" + (minutes < 10 ? "0" : "") + minutes + ":" + (seconds < 10 ? "0" : "") + seconds;

                return elapsed;
            });

            self.start = function (callback) {
                var self = this;

                self.interval = setInterval(function () {
                    self.totalSeconds(self.totalSeconds() + 1);
                    if (callback) callback();
                }, 1000);
            }

            self.pause = function () {
                clearInterval(self.interval);
                delete this.interval;
            }

            self.resume = function (callback) {
                if (!self.interval) self.start(callback);
            }

            self.stop = function (callback) {
                clearInterval(self.interval);
                delete this.interval;
                self.totalSeconds(0);
                if (callback) callback();
            }
        }

        function player(guid, name, squadNumber) {
            var self = this;
            self.name = name;
            self.guid = guid;
            self.squadNumber = squadNumber;

            self.isSelected = ko.observable(false);
            self.gameTimeMilliSeconds = ko.observable(0);
            self.ins = ko.observable(0);
            self.outs = ko.observable(0);
            self.timeBroughtOn = ko.observable(null);

            self.isPlaying = ko.pureComputed(function () {
                return self.timeBroughtOn() != null;
            });            

            self.resetTime = function () {
                self.timeBroughtOn(null);
            }

            self.updateGameTime = function (referenceTime) {
                if (referenceTime != null && self.timeBroughtOn() != null) {
                    var milliSecondsOn = referenceTime - self.timeBroughtOn();
                    self.gameTimeMilliSeconds(self.gameTimeMilliSeconds() + milliSecondsOn);
                    self.timeBroughtOn(referenceTime);
                }
            }

            self.getTotalGameTime = ko.pureComputed(function () {
                var millis = self.gameTimeMilliSeconds();
                var minutes = Math.floor(millis / 60000);
                var seconds = ((millis % 60000) / 1000).toFixed(0);
                return minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
            });

            self.attendance = ko.observable(0);
        }

        function game() {
            var self = this;

            self.stage = ko.observable(gameStages.beforeKickOff);

            self.isGameUnderWay = ko.pureComputed(function () {
                return self.stage() == gameStages.firstHalfStarted || self.stage() == gameStages.secondHalfStarted;
            });

            self.isGameOver = ko.pureComputed(function () {
                return self.stage() == gameStages.gameOver;
            });

            self.moveStage = function () {
                console.log(self.stage());

                if (!self.isGameOver()) {
                    self.stage(self.stage() + 1);
                    self.clock.stop();
                    var referenceTime = new Date().getTime();
                    for (var i = 0; i < self.lineup().length; i++) {
                        self.lineup()[i].updateGameTime(referenceTime);
                        self.lineup()[i].resetTime();
                    }
                }

                if (self.stage() == gameStages.firstHalfStarted) {
                    var referenceTime = new Date().getTime();
                    for (var i = 0; i < self.lineup().length; i++) {
                        self.lineup()[i].timeBroughtOn(referenceTime);
                    }
                    self.clock.start(self.updatePlayerGameTime);
                }

                if (self.stage() == gameStages.halfTime) {
                    self.clock.stop();
                    var referenceTime = new Date().getTime();
                    for (var i = 0; i < self.lineup().length; i++) {
                        //self.lineup()[i].updateGameTime(referenceTime);
                        self.lineup()[i].resetTime();
                    }
                }

                if (self.stage() == gameStages.secondHalfStarted) {
                    var referenceTime = new Date().getTime();
                    for (var i = 0; i < self.lineup().length; i++) {
                        self.lineup()[i].timeBroughtOn(referenceTime);
                    }
                    self.clock.start(self.updatePlayerGameTime);
                }
            }

            self.nextStageName = ko.pureComputed(function () {
                return gameStageCommands[self.stage() + 1];
            });

            self.currentStageDescription = ko.pureComputed(function () {
                return gameStageDescription[self.stage()];
            });

            self.lineup = ko.observableArray(
                //[
                //new player("1", "Romy Lukaku", "9"),
                //new player("2", "David De Gea", "1"),
                //new player("3", "Marcus Rashford", "14"),
                //new player("4", "Anthony Martial", "11"),
                //new player("5", "Antonio Valencia", "31"),
                //new player("6", "Nemanja Matic", "6"),
                //new player("7", "Paul Pogba", "8")
                //]
            );

            self.substitutes = ko.observableArray(
                //[
                //new player("8", "Scott MacTominay", "40"),
                //new player("9", "Ashley Young", "5"),
                //new player("10", "Chris Smalling", "4")
                //]
            );

            self.players = ko.pureComputed(function () {
                return self.lineup().sort(sortingComparer).concat(self.substitutes().sort(sortingComparer));
            });

            self.selectPlayer = function (player) {
                player.isSelected(!player.isSelected());
            }

            self.executeSubstitutions = function () {
                console.log("substituting...")
                var affected = self.lineup();
                var index = affected.length;
                while (index--) {
                    var player = affected[index];
                    if (player.isSelected()) {
                        player.isSelected(false);
                        player.resetTime();
                        self.substitutes.push(player);
                        self.lineup.remove(player);
                    }
                }

                affected = self.substitutes();
                index = affected.length;
                while (index--) {
                    var player = affected[index];
                    if (player.isSelected()) {
                        player.isSelected(false);
                        if (self.isGameUnderWay()) {
                            player.timeBroughtOn(new Date().getTime());
                        }
                        self.lineup.push(player);
                        self.substitutes.remove(player);
                    }
                }
            }

            self.clock = new clock();

            self.updatePlayerGameTime = function () {
                if (self.isGameUnderWay()) {
                    var referenceTime = new Date().getTime();
                    for (var i = 0; i < self.lineup().length; i++) {
                        var player = self.lineup()[i];
                        player.updateGameTime(referenceTime);
                    }
                }
            }
        }

        function sortingComparer(a, b) {
            return (a.name > b.name) ? 1 : 0;
        }

        var gameViewModel = new game();
        ko.applyBindings(gameViewModel);

        $.ajax({
            method: "GET",
            url: '@($"/api/events/{Model.EventId}/attendance")',
            contentType: 'application/json',
        }).done(function (data) {
            var players = [];
            for (var i = 0; i < data.length; i++) {
                var p = new player(data[i].playerGuid, data[i].playerName, data[i].squadNumber);
                var presence = data[i].attendance;
                if (presence != null && [attendance.present, attendance.late].indexOf(presence) != -1) {
                    p.attendance(p);
                    players.push(p);
                }
            }
            gameViewModel.substitutes(players);
        });
    </script>
    <script src="~/js/attendance.js"></script>

    <script type="text/javascript">
        $('#checkAttendance').click(function () {
            var url = $('#attendanceDialog').data('url');

            $.ajax({
                method: "GET",
                url: 'attendance',
                contentType: 'html',
            })
                .done(function (data) {
                    var container = $(data).find("div.table-responsive");
                    $('#attendanceContainer').html(container);
                    $('#attendanceDialog').modal('show');
                    bindEvents('button.attendance');
                });
        });
    </script>
}

@section CSS {
    <style>
        .broughtOn {
            font-weight: 700;
            background-color: rgb(245, 245, 245);
        }

        .clock {
            font-size: 2.5em;
            font-weight: 700;
            color: gray;
        }
    </style>
}